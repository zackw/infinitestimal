+ examples/basic
F
FAIL standalone_test: (expected failure) (examples/basic.c:nn)

* Suite suite:

This should have some failures:
.........s..F
FAIL example_test_case: r >= 1 (examples/basic.c:nn)
...F
FAIL example_test_case: r >= 1 (examples/basic.c:nn)
...s....F
FAIL example_test_case: r >= 1 (examples/basic.c:nn)
............s...s......F
FAIL example_test_case: r >= 1 (examples/basic.c:nn)
..sF
FAIL example_test_case: r >= 1 (examples/basic.c:nn)
...F
FAIL example_test_case: r >= 1 (examples/basic.c:nn)
.s...................F
FAIL example_test_case: r >= 1 (examples/basic.c:nn)
.......s...F
FAIL example_test_case: r >= 1 (examples/basic.c:nn)
.........F
FAIL example_test_case: r >= 1 (examples/basic.c:nn)
...s......sF
FAIL example_test_case: r >= 1 (examples/basic.c:nn)
.s....F
FAIL example_test_case: r >= 1 (examples/basic.c:nn)
.s..ss..............s....F
FAIL example_test_case: r >= 1 (examples/basic.c:nn)
...F
FAIL example_test_case: r >= 1 (examples/basic.c:nn)
......ss.....sF
FAIL example_test_case: r >= 1 (examples/basic.c:nn)
.F
FAIL example_test_case: r >= 1 (examples/basic.c:nn)
.......s.....s.....s.........s..F
FAIL expect_equal: 10 != i (examples/basic.c:nn)

This should fail:

Expected: foo2
     Got: foo1
F
FAIL expect_str_equal: "foo2" != foo1 (examples/basic.c:nn)

This should pass:
..
This should fail:

Expected: {3}
     Got: {4}
F
FAIL expect_boxed_int_equal: &a != &c (examples/basic.c:nn)

This should fail:
F
FAIL expect_boxed_int_equal_no_print: &a != &c (examples/basic.c:nn)

This should fail, printing the mismatched values in hex.

Expected: 0xba5eba11
     Got: 0xf005ba11
F
FAIL expect_int_equal_printing_hex: a != b (examples/basic.c:nn)

This should fail and show floating point values just outside the range.

Expected: 1e-05 +/- 0.0001
     Got: 0.000111
F
FAIL expect_floating_point_range: out of range (examples/basic.c:nn)
-- in setup callback
-- in teardown callback
.
This should fail:
-- in setup callback
-- in teardown callback
F
FAIL teardown_example_FAIL: Using FAIL to trigger teardown callback (examples/basic.c:nn)
This should be skipped:
-- in setup callback
-- in teardown callback
sThis should fail, but note the subfunction that failed.
F
FAIL example_using_subfunctions: arg < 3 (examples/basic.c:nn)

This should fail:
F
FAIL parametric_example_c89: arg > 10 (examples/basic.c:nn)
.
This should fail:

Expected:
0000   00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  ................
0010 X 10 11 12 13 14 15 16 17<18 19 1a 1b 1c 1d 1e 1f  ................
0020 X 20 21 22<23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f   !"#$%&'()*+,-./
0030   30 31 32 33 34 35 36 37                          01234567

     Got:
0000   00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f  ................
0010 X 10 11 12 13 14 15 16 58<18 19 1a 1b 1c 1d 1e 1f  .......X........
0020 X 20 21 58<23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f   !X#$%&'()*+,-./
0030   30 31 32 33 34 35 36 37                          01234567

F
FAIL expect_mem_equal: expected matching memory (examples/basic.c:nn)

This should fail:

Expected: FOO_1
     Got: FOO_2
F
FAIL expect_enum_equal: FOO_1 != foo_2_with_side_effect() (examples/basic.c:nn)

This should NOT fail:
.
This test can be skipped with a negative test filter...
fib 1 -> 1
fib 2 -> 2
fib 3 -> 3
fib 4 -> 5
fib 5 -> 8
fib 6 -> 13
fib 7 -> 21
fib 8 -> 34
fib 9 -> 55
fib 10 -> 89
fib 11 -> 144
fib 12 -> 233
fib 13 -> 377
fib 14 -> 610
fib 15 -> 987
fib 16 -> 1597
fib 17 -> 2584
fib 18 -> 4181
fib 19 -> 6765
fib 20 -> 10946
fib 21 -> 17711
fib 22 -> 28657
fib 23 -> 46368
fib 24 -> 75025
fib 25 -> 121393
fib 26 -> 196418
fib 27 -> 317811
fib 28 -> 514229
fib 29 -> 832040
fib 30 -> 1346269
fib 31 -> 2178309
fib 32 -> 3524578
fib 33 -> 5702887
fib 34 -> 9227465
fib 35 -> 14930352
fib 36 -> 24157817
fib 37 -> 39088169
fib 38 -> 63245986
fib 39 -> 102334155
.Error: Test run inside another test.
This nested RUN_TEST call should not trigger an infinite loop...
.
These next several tests should also fail:
F
FAIL eq_pass_and_fail: x != y (examples/basic.c:nn)
F
FAIL neq_pass_and_fail: x == x (examples/basic.c:nn)
F
FAIL gt_pass_and_fail: x <= x (examples/basic.c:nn)
F
FAIL gte_pass_and_fail: y < z (examples/basic.c:nn)
F
FAIL lt_pass_and_fail: x >= x (examples/basic.c:nn)
F
FAIL lte_pass_and_fail: z > x (examples/basic.c:nn)

225 tests - 171 passed, 32 failed, 22 skipped (nn ticks, n.nnn sec)

* Suite other_suite:
.s
2 tests - 1 passed, 0 failed, 1 skipped (nn ticks, n.nnn sec)
F
FAIL standalone_test: (expected failure) (examples/basic.c:nn)

Total: 229 tests (nn ticks, n.nnn sec), 416 assertions
Pass: 172, fail: 34, skip: 23.
+ examples/basic: $? = 1
+ examples/basic_cplusplus
F
FAIL standalone_test: (expected failure) (examples/basic_cplusplus.cpp:nn)

Total: 1 test (nn ticks, n.nnn sec), 0 assertions
Pass: 0, fail: 1, skip: 0.
+ examples/basic_cplusplus: $? = 1
+ examples/minimal_template

* Suite suite:
setup callback for each test case
teardown callback for each test case
.
1 test - 1 passed, 0 failed, 0 skipped (nn ticks, n.nnn sec)

Total: 1 test (nn ticks, n.nnn sec), 0 assertions
Pass: 1, fail: 0, skip: 0.
+ examples/minimal_template: $? = 0
+ examples/no_runner
.
Standard report, as printed by itest:

Total: 1 test (nn ticks, n.nnn sec), 0 assertions
Pass: 1, fail: 0, skip: 0.

Custom report:
pass 1, fail 0, skip 0, assertions 0
+ examples/no_runner: $? = 0
+ examples/no_suite
F
FAIL standalone_fail: (expected failure) (examples/no_suite.c:nn)
.s
Total: 3 tests (nn ticks, n.nnn sec), 0 assertions
Pass: 1, fail: 1, skip: 1.
+ examples/no_suite: $? = 1
+ examples/shuffle
init_second_pass: <<variable>>
init_second_pass: <<variable>>

* Suite suite_shuffle_pass_and_failure:
F
FAIL just_fail:  (examples/shuffle.c:nn)
running test from suite 5
.running test from suite 4
.running test from suite 3
.running test from suite 2
.running test from suite 1
.
6 tests - 5 passed, 1 failed, 0 skipped (nn ticks, n.nnn sec)

* Suite suite5:
running test from suite 5
.
1 test - 1 passed, 0 failed, 0 skipped (nn ticks, n.nnn sec)

* Suite suite4:
running test from suite 4
.
1 test - 1 passed, 0 failed, 0 skipped (nn ticks, n.nnn sec)

* Suite suite3:
running test from suite 3
.
1 test - 1 passed, 0 failed, 0 skipped (nn ticks, n.nnn sec)

* Suite suite2:
running test from suite 2
.count 0, seed nnnnn
count 1, seed nnnnn
init_second_pass: <<variable>>

1 test - 1 passed, 0 failed, 0 skipped (nn ticks, n.nnn sec)

* Suite suite1:
running test 0
.count 2, seed nnnnn
init_second_pass: <<variable>>
running test 1
.running test 0
.count 3, seed nnnnn
init_second_pass: <<variable>>
running test 1
.running test 0
.running test 2
.count 4, seed nnnnn
init_second_pass: <<variable>>
running test 1
.running test 0
.running test 3
.running test 2
.count 5, seed nnnnn
init_second_pass: <<variable>>
running test 4
.running test 3
.running test 2
.running test 1
.running test 0
.count 6, seed nnnnn
init_second_pass: <<variable>>
running test 5
.running test 4
.running test 3
.running test 2
.running test 1
.running test 0
.count 7, seed nnnnn
init_second_pass: <<variable>>
running test 5
.running test 4
.running test 3
.running test 2
.running test 1
.running test 0
.running test 6
.count 8, seed nnnnn
init_second_pass: <<variable>>
running test 5
.running test 4
.running test 3
.running test 2
.running test 1
.running test 0
.running test 7
.running test 6
.count 9, seed nnnnn
init_second_pass: <<variable>>
running test 5
.running test 2
.running test 1
.running test 8
.running test 7
.running test 4
.running test 3
.running test 0
.running test 6
.count 10, seed nnnnn
init_second_pass: <<variable>>
running test 5
.running test 2
.running test 1
.running test 8
.running test 7
.running test 4
.running test 3
.running test 9
.running test 0
.running test 6
.init_second_pass: <<variable>>
.................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
........................................................................
...............................................
1055 tests - 1055 passed, 0 failed, 0 skipped (nn ticks, n.nnn sec)

* Suite suite_failure:
F
FAIL just_fail:  (examples/shuffle.c:nn)

1 test - 0 passed, 1 failed, 0 skipped (nn ticks, n.nnn sec)

Total: 1066 tests (nn ticks, n.nnn sec), 0 assertions
Pass: 1064, fail: 2, skip: 0.
+ examples/shuffle: $? = 1
+ examples/trunc

* Suite suite:
...........
11 tests - 11 passed, 0 failed, 0 skipped (nn ticks, n.nnn sec)
sizeof(itest_info): 320

Total: 11 tests (nn ticks, n.nnn sec), 0 assertions
Pass: 11, fail: 0, skip: 0.
+ examples/trunc: $? = 0
